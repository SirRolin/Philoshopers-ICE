@startuml
'https://plantuml.com/class-diagram

class Launcher extends javafx.Application {
    + void start(Stage stage) throws Exception
    - Parent createContent()
    + void main(String[] args)
    + GameState game
    + MainMenuGUI ui
}
abstract class GUI {
    + update(GameState gs)
    + ArrayList<Commands> commands
}
class explorerScene extends GUI {
}
class CharacterScene extends GUI{
    + player createPlayer()
    + Player levelUpMenu(player)
}
abstract class StateSaver Extends util.FileIO {
    Boolean savePlace(Place)
    Boolean saveGame(GameState)
    GameState loadGame(SaveFolder)
    GameState newGame()
}
abstract class util.FileIO {
    + String defaultPath
    + readSerialised(String)
    + readTextFile(String)
    + writeSerialised(Object, String)
}
class GameState extends External.Serializable{
    + Name
    + MapTile[5][5] miniMap
    + Player p1
    + HashMap<GUI> guis
    + GUI activeGUI
}
abstract class JSONInterpreter {
    + List<Object> Interpret(String[] lines)
    - List<Object> Interpret(String[] lines, Int start)
}
class Commands {
    - String searchPatterns
    + Void Action()
    + void Search(String text)
}
class Player extends External.Serializable {
    + Player(int Str, int Agi, int Con, int Wits, int IQ, int Magi)
    + String name
    + int str
    + int agi
    + int con
    + int wits
    + int willPower
    + int magi
    - int hp
    - int mp
    + int getMaxHP()
    + int getMaxMP()
    + int getSpeed()
    + ArrayList<Boon> boons
    + Inventory inventory
    + int getInitiative()
    + int getSpellBuffProc()
    + int increaseHP(int hp)
    + int increaseMP(int mp)
    + int getHP()
    + int getMP()
    + void recover()
}
class Effect{
    + String statName
    + Int valueBy
    + Effect(String, Int)
}
class Allies {
    + ArrayList<Effect> buffs
    + String name
}
class Inventory extends External.Serializable {
    - ArrayList<Item> items
    - Item equippedWeaponMainHand
    - Item equippedWeaponOffHand
    - Item equippedArmour
    - Accessory equippedAccessory
    - int maxSize
    + ArrayList<Item> getItems()
    + void addToItems(Item)
    + int getDamage()
    + int getDefence()
    + void equipItem(Item)
}
class MapTile extends External.Serializable {
    + updateEffectsPlayer()
    + updateEffectsEnemy()
    + String imagePath
    + ArrayList<Enemy> enemy
    + ArrayList<Boon> boons
}
abstract class Item extends External.Serializable{
    + ArrayList<Enchantment> enchantment
    + String name
    + String description
}
abstract class Weapon extends Item, External.Serializable {
    +getName()
    +getDmg()
    +getType()
    +getDamageType()
}
class Melee extends Weapon, External.Serializable {
    - String name
    - boolean type
}
class Ranged extends Weapon, External.Serializable {
    - String name
    - boolean type
}
abstract class Armour extends Item, External.Serializable {
    + String name
    + String type
    + getDef()
}
class Consumable extends Item, External.Serializable {
    - String description
    + String get description()
    + String name
}
class Accessory extends Item, External.Serializable {
}
class Enchantment extends External.Serializable{
    + ArrayList<Effect> stats
    + String prefix
    + String suffix
}
class Currency{
    + int value
    + String name
    + String description
    + getDescription()
    + getCurrencyType()
    + getValue()

}
class Enemy extends External.Serializable {
    - String name
    - int initiative
    - String description
    + getName()
    + getInitiative()
    + getDescription()
    + getDefence()
    + getDamage()
}
class CombatScene extends GUI {
    - ArrayList<Enemy> enemies
    - currentPlayer p
    - int maxInitiative
    + void startCombat(player)
    + void endCombat()


}
class EffectCard {
    + ArrayList<Effect> statChanges
    + String name
    + String desc
}
interface External.Serializable
Launcher --> StateSaver
Launcher *-- GameState
Launcher *-- MainMenuGUI
GameState *-- GUI
GUI -> MapTile
StateSaver -> MapTile
StateSaver -> GameState
GameState --> CharacterScene
GameState -* explorerScene
JSONInterpreter --> GameState
Player <- CharacterScene
GameState *-- Player
Commands --* explorerScene
Commands --* CharacterScene
Commands --* CombatScene
Player o-- Allies
Player *-- Inventory
GameState "5x5" *-- MapTile
Inventory "0-?" o-- Item
Enchantment -o Item
Effect --* Enchantment
Effect --* Allies
Effect --* EffectCard
Inventory *- Currency
Enemy o-- Currency
Enemy o- Item
MapTile o-- Enemy
MapTile o-- CombatScene
Player -* CombatScene
CombatScene *- Enemy
Player o-- EffectCard
MapTile o-- EffectCard

@enduml