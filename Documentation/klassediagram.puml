@startuml
'https://plantuml.com/class-diagram

package ICE.util{
abstract class ErrorHandler{
+{static} String debugLogPath = "";
+{static} String errorLogPath = "";
+{static} void handleError(Exception e)
+{static} void logDebug(String text)
}

abstract class FileInterpreter {
+{static} ArrayList<HashMap<String, Object>> parseFolder(String path)
+{static} HashMap<String, Object> parseFile(String path)
+{static} ArrayList<HashMap<String, Object> parseList(String text, String path)
+{static} ArrayList<HashMap<String, Object>> parseList(String text, String path, boolean careForFirstKey)
+{static} HashMap<String, Object> parse(String text, String path)
+{static} String ExtractList(String text, ArrayList<Object> listsForOutput)
FINAL {static} Pattern patternBoolean
-{static} String ExtractBoolean(String text, HashMap<String, Object> mapsForOutput)
FINAL {static} Pattern patternMap
-{static} String ExtractElements(String text, HashMap<String, Object> map, ArrayList<Object> list, String path)
FINAL {static} Pattern patternProperty
- {static} String ExtractProperty(String text, HashMap<String, Object> mapsForOutput)
FINAL {static} Pattern patternNumber
- {static} String ExtractRandomNumbers(String text, ArrayList<Object> listsForOutput)
- {static} Object tryParseFloat(String text, boolean defaultIsZero)
- {static} boolean isNumeric(String text)
- {static} Object tryParseFloat(String text, boolean defaultIsZero)
- {static} boolean isNumeric(String text)
- {static} int charsToPairedClosingBracket(String text)
+ {static} ArrayList<String> findObjects(String text, String path, boolean doThrowTokenError)
}

abstract class FileIO {
    + {static} String defaultPath
    + {static} List<String> readTextFile(String path)
    + {static} <T> @Nullable T readSerialised(String path)
    + {static} boolean writeSerialised(Object obj, String path)
}

abstract class HashMapExplorer{
+ {static} HashMap<String,Object> getMap(Object obj, String key)
+ {static} String getImage(Object obj, String key)
+ {static} String getString(Object obj, String key)
+ {static} boolean getBoolean(Object obj, String key)
+ {static} Number getNumber(Object obj, String key)
+ {static} ArrayList<Object> getList(Object obj, String key)
- {static} Object getToObject(HashMap<?,?> map, String key)
}

class RngHandler{
+ {static} <T> void WeightedObjectsToList(ArrayList<WeightedObject> chanceList, ArrayList<T> loot)
}

class WeightedObject {
+ Number weight
+ Object obj

WeightedObject(Number weight, Object obj)
}
}


package GUI{
class CharacterCreationController Implements javafx.Initializable{
-Stage stage
-Scene scene
-Parent root
-Player currentPlayer
-String playerName
-Race playerRace
-ArrayList<Label> statLabels
-ArrayList<Button> addButtons
-ArrayList<Button> subtractButtons
-ArrayList<Race> races
-int raceIndex
-int[] stats
-String[] statNames
+GameState gs
-@FXML Button startButton
-@FXML DialogPane raceBio
-@FXML ImageView raceImage
-@FXML GridPane statPane
-@FXML TextField nameField
-@FXML Button leftRaceButton
-@FXML Button rightRaceButton

+void switchToMainMenu(ActionEvent event) throws Exception
+void initialize(URL url, ResourceBundle resourceBundle)
+void onStartButton()
-void setUpSbtButton(final int index)
-void setUpAddButton(final int index)

}

class GameSceneController Implements javafx.Initializable{
-Stage stage
-Scene scene
-Parent root
-GameState gs
- @FXML Button MainMenu
- @FXML Button QuitGame
- @FXML Label statsLabel
- @FXML GridPane statsPane
- @FXML GridPane map
- @FXML GridPane inventoryPane
- @FXML DialogPane gamePane
- @FXML DialogPane logPane

+ void SwitchToMainMenu(ActionEvent event) throws Exception
+ void initialize(URL url, ResourceBundle resourceBundle)
- void startCombat(CombatScene combatScene)
}


class LoadGameController Implements javafx.Initializable{
-Stage stage
-Scene scene
-Parent root
-GameState gs
-@FXML GridPane testGrid
+void switchToMainMenu(Action event) throws Exception
+void switchToGameScene(ActionEvent event) throws Exception
+void initialize(Url url, resourceBundle resourceBundle)
}


class MainMenuController Implements javafx.Initializable{
-Stage stage
-Scene scene
-Parent root
-GameState gs
+void switchToCharacterCreation(ActionEvent event) throws Exception
+void switchToLoadGame(ActionEvent event) throws Exception
+void closeProgram()
+void initialize(URL url, ResourceBundle resourceBundle)
}

class Main extends javafx.Application{
+{static}void main(String[] args)
+void start(Stage primaryStage) throws Exception
}

abstract class SharedData{
+{static} GameState gs
+{static} ArrayList<HashMap<String, Object>> defines
+{static} String getdefineString(String key)
+{static} void load()
+{static} void reload()

}

abstract class AlertBox{
{static} -GameState gs
{static} -boolean isClosed
+{static} void display(String title, String message)
+{static} GameState display(String title, String message, String typeOfInput)
}
}



package philosophers_ice{
abstract class StateSaver Extends ICE.util.FileIO {
    + Boolean saveMap(GameState,MapTile,int,int)
    + Boolean saveGame(GameState)
    + GameState loadGame(String)
    + MapTile loadMap(GameState,int,int)
    + GameState newGame()
}

class Launcher {
    + {static} void main
}

class CharacterScene{
    - Player currentPlayer
    - ArrayList<Enemy> enemies
    - int maxInitiative
    - int tmpPlayerInitiative
    - int turn
    + CombatScene(Player,ArrayList<Enemy>)
    + void startCombat()
    - void combat
    + void endCombat()
    + void endGame()
    - void chooseActionPlayer()
    - Enemy chooseEnemyToAttack()
    - boolean enemyNotAboveMaxInitiative()

}
class GameState extends External.Serializable{
    + MapTile[][] maptile
    + String name
    + Player p1
    + int x
    + int y
    + GameState()
    + GameState(String)
    + MapTile[][] getMinimap(int)
}
class Commands {
    - String searchPatterns
    - VoidFunction action
    commands(String, VoidFunction)
    + boolean Action(String text)
}
class Player extends External.Serializable {
    + Player(String)
    + Player(Strin name,String race,int Str, int Agi, int Con, int Wits, int willPower, int Magi)
    + String name
    + String race
    + int str
    + int agi
    + int con
    + int wits
    + int willPower
    + int magi
    - int hp
    - int mp
    - String imagePath
    + int initiative
    - ArrayList<EffectCard> effectCards
    - Inventory inventory
    - int getDefence()
    + int attack()
    + int getHP()
    + Image getImage()
    + int getInitiative()
    + void getLoot(ArrayList<Item>)
    + int getMaxHP()
    + int getMaxMP()
    + int getMP()
    + int getSpeed()
    + int getSpellBuffProc()
    + void increaseHP(int)
    + void increaseMP(int)
    + void recover()
    + int takeDamge(int)
}
class Effect Implements External.Serializable{
    + String name
    + int valueBy
    + HashMap statChange
    + Effect(String name,int valueBy, HashMap<String ,Integer> statChange)
    - {static} FINAL ArrayList<Effect> listOfUs = new ArrayList<Effect>()
    + {static} void load()
    + {static} void reload()
    + int statCalculator(String stat)
    + String getName()
    + int getValueBy()
}
class Allies Implements External.Serializable{
    + ArrayList<Effect> buffs
    + String name
    + String description
    + Allies(ArrayList<Effect> buffs ,String name,String description)
    + ArrayList<Effect> getBuffs()
    + String getName()
    + String getDescription()

}
class Inventory extends External.Serializable {
    - Accessory equippedAccessory
    - Armour equippedArmour
    - Weapon equippedMainHand
    - Weapon equippedOffHand
    - ArrayList<Item> items
    - int maxSize
    + Player p1
    + inventory()
    + inventory(Player)
    + void addToItems(Item)
    - void equipArmour(Armour)
    + void equipItem(Item)
    - void equipOneHanded(Weapon)
    - void equipTwoHanded(Weapon)
    - void equipWeapon(Weapon)
    + int getDamage()
    + int getDefence()
    + void getEffectModifiers()
    + Accessory getEquippedAccessory()
    + Armour getEquippedArmour()
    + Weapon getEquippedMainHand()
    + Weapon getEquippedOffHand()
    + Item getItem(String)
    + ArrayList<Item> getItems()
    + int getMaxSize()
}
class MapTile extends External.Serializable {
    '+ updateEffectsPlayer()
    '+ updateEffectsEnemy()
    + String imagePath
    + ArrayList<Enemy> enemy
    + ArrayList<EffectCard> effectCards
    + String name
    + MapTile(HashMap<?,?>)
    + MapTile(MapTile)
    + MapTile(String)
    + MapTile(String,String)
    + Image[] getImage()
}
abstract class Item extends External.Serializable{
    - ArrayList<Item> listOfUs
    + String name
    + String description
    + String imagePath
    + ArrayList<Effect> statChanges
    + Image getImage()
    + Item getItem(string)
    + String getName()
    + void load()
    + void reload()
}
abstract class Weapon extends Item, External.Serializable {
    - boolean isOneHanded
    - boolean isTwoHanded
    + Weapon(boolean,boolean)
    + Weapon(HashMap<String,Object>)
    + int getDmg()
    + String getDmgType()
    + boolean getType()
    + boolean isOneHanded()
    + boolean isTwoHanded()
}
class Melee extends Weapon, External.Serializable {
    + int maxDamage
    + int minDamage
    + Melee(HashMap<String,Object>)
    + Melee(String,int,int,boolean,boolean)
    + int getDmg()
    + String getDmgType()
    + boolean getType()
}
class Ranged extends Weapon, External.Serializable {
    - int maxDamage
    - int minDamage
    + Ranged(HashMap<String,Object>)
    + Ranged(String, int,int,boolean,boolean)
    + int getDmg()
    + String getDmgType()
    + boolean getType()
}
abstract class Armour extends Item, External.Serializable {
    + String type
    + int defence
    + Armour(HashMap<String,Object> map)
    + Armour(String name ,int defence)
    + getDef()
}
class Consumable extends Item, External.Serializable {
    - String description
    + String get description()
    + String name
}
class Accessory extends Item, External.Serializable {
+Accessory(Accessory accessory)
}
class Enchantment extends External.Serializable{
    + ArrayList<Effect> stats
    + String prefix
    + String suffix
    + Enchantment(ArrayList<Effect>,String,String)
    + String getPrefix()
    + String getSuffix()
}
class Currency Implements External.Serializable{
    - {static} FINAL ArrayList<Currency> listOfUs
    + {static} Currency getCurrency(String name)
    + {static} void load()
    + {static} void reload()
    + int amount
    + String description
    + String name
    + String imagePath
    + Currency(HashMap<String,Object> map)
    + Currency(Currency _this, int amount)
    + int getAmount()
    + String getDescription()
    + String getName()
    + Image getImage()

}
class Enemy extends External.Serializable {
    - String name
    - int initiative
    - String description
    - int damage
    - int defence
    - String description
    - int hp
    - String imagePath
    - int initiative
    - ArrayList<Item> loot
    - String name
    + Enemy(HashMap<String, Object>)
    + Enemy(String,String,String,int,int,int,int)
    + int attack()
    + ArrayList<Item> droppedLoot()
    + int getDefence()
    + String getDescription()
    + int getHP()
    + Image getImage()
    + String getImagePath()
    + int getInitiative()
    + String getName()
    + int takeDamage(int)
    + void updateInitiative(int)
}
class CombatScene {
    - ArrayList<Enemy> enemies
    - Player currentPlayer
    - int tmpPlayerInitiative;
    - int maxInitiative
    - int turn
    + CombatScene(Player player,ArrayList<Enemy> enemies)
    + void startCombat()
    - void combat()
    - void chooseActionPlayer()
    + void endCombat()
    + void endGame(){
    - boolean enemyNotAboveMaxInitiative()
    - Enemy getHighestInitiativeEnemy()
    - Enemy chooseEnemyToAttack()
}
class EffectCard Implements External.Serializable {
    + ArrayList<Effect> statChanges
    + String name
    + String desc
    + EffectCard(ArrayList<Effect>,String,String)
    + void addBuffs()
    + String getDesc()
    + String getName()
    + ArrayList<Effect> getStatChanges()
}
class Race extends External.Serializable  {
    - String imagePath
    - ArrayList<Race> listOfUs
    + String name
    + Race(HashMap<String,Object>,String)
    + Race(String,String)
    + Race getRace(String)
    + ArrayList<Race> getRaces()
    + void load()
    + void reload()
}
interface External.Serializable
Launcher --> StateSaver
Launcher *-- GameState
StateSaver -> MapTile
StateSaver -> GameState
GameState --> CharacterScene
FileInterpreter --> GameState
Player <- CharacterScene
GameState *-- Player
Commands --* CharacterScene
Commands --* CombatScene
Player o-- Allies
Player *-- Inventory
Player *-- Race
GameState "5x5" *-- MapTile
Inventory "0-?" o-- Item
Enchantment -o Item
Effect --* Enchantment
Effect --* Allies
Effect --* EffectCard
Inventory *- Currency
Enemy o-- Currency
Enemy o- Item
MapTile o-- Enemy
MapTile o-- CombatScene
Player -* CombatScene
CombatScene *- Enemy
Player o-- EffectCard
MapTile o-- EffectCard
Main <-- Launcher
Main <-- MainMenuController
MainMenuController <-- LoadGameController
MainMenuController <-- CharacterCreationController
MainMenuController <-- AlertBox
LoadGameController <-- GameSceneController
CharacterCreationController <-- GameSceneController
Main <-- SharedData
MainMenuController <-- SharedData
LoadGameController <-- SharedData
GameSceneController <-- SharedData

@enduml