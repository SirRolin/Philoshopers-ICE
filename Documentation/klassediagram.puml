@startuml
'https://plantuml.com/class-diagram

class Launcher extends javafx.Application {
    '+ void start(Stage stage) throws Exception
    '- Parent createContent()
    '+ void main(String[] args)
    '+ GameState game
    '+ MainMenuGUI ui
    + main
}
abstract class GUI {
    + update(GameState gs)
    + ArrayList<Commands> commands
}
class explorerScene extends GUI {
}
class CharacterScene{
    - Player currentPlayer
    - ArrayList<Enemy> enemies
    - int maxInitiative
    - int tmpPlayerInitiative
    - int turn
    + CombatScene(Player,ArrayList<Enemy>)
    + void startCombat()
    - void combat
    + void endCombat()
    + void endGame()
    - void chooseActionPlayer()
    - Enemy chooseEnemyToAttack()
    - boolean enemyNotAboveMaxInitiative()

}
abstract class StateSaver Extends util.FileIO {
    + Boolean saveMap(GameState,MapTile,int,int)
    + Boolean saveGame(GameState)
    + GameState loadGame(String)
    + MapTile loadMap(GameState,int,int)
    + GameState newGame()
}
abstract class util.FileIO {
    + String defaultPath
    + readSerialised(String)
    + readTextFile(String)
    + writeSerialised(Object, String)
}
class GameState extends External.Serializable{
    + GUI activeGUI
    + MapTile[][] maptile
    + String name
    + Player p1
    + int x
    + int y
    + GameState()
    + GameState(String)
    + MapTile[][] getMinimap(int)
}
abstract class JSONInterpreter {
    + List<Object> Interpret(String[] lines)
    - List<Object> Interpret(String[] lines, Int start)
}
class Commands {
    - String searchPatterns
    + Void Action()
    + void Search(String text)
}
class Player extends External.Serializable {
    + Player(String)
    + Player(Strin name,String race,int Str, int Agi, int Con, int Wits, int willPower, int Magi)
    + String name
    + String race
    + int str
    + int agi
    + int con
    + int wits
    + int willPower
    + int magi
    - int hp
    - int mp
    - String imagePath
    + int initiative
    - ArrayList<EffectCard> effectCards
    - Inventory inventory
    - int getDefence()
    + int attack()
    + int getHP()
    + Image getImage()
    + int getInitiative()
    + void getLoot(ArrayList<Item>)
    + int getMaxHP()
    + int getMaxMP()
    + int getMP()
    + int getSpeed()
    + int getSpellBuffProc()
    + void increaseHP(int)
    + void increaseMP(int)
    + void recover()
    + int takeDamge(int)
}
class Effect{
    - FINAL ArrayList<Effect> listOfUs
    + String name
    + HashMap statChange
    + int valueBy
    + Effect(String,int,HashMap<String,Integer>)
    + Effect getItem(String)
    + String getName()
    + int getValue()
    + void load()
    + void reload()
    + int statCalculator(String)
}
class Allies {
    + ArrayList<Effect> buffs
    + String name
    + String description
    + Allies(ArrayList<Effect>,String,String)
    + ArrayList<Effect> getbuffs()
    + String getDescription()
    + String getName()
}
class Inventory extends External.Serializable {
    - Accessory equippedAccessory
    - Armour equippedArmour
    - Weapon equippedMainHand
    - Weapon equippedOffHand
    - ArrayList<Item> items
    - int maxSize
    + Player p1
    + inventory()
    + inventory(Player)
    + void addToItems(Item)
    - void equipArmour(Armour)
    + void equipItem(Item)
    - void equipOneHanded(Weapon)
    - void equipTwoHanded(Weapon)
    - void equipWeapon(Weapon)
    + int getDamage()
    + int getDefence()
    + void getEffectModifiers()
    + Accessory getEquippedAccessory()
    + Armour getEquippedArmour()
    + Weapon getEquippedMainHand()
    + Weapon getEquippedOffHand()
    + Item getItem(String)
    + ArrayList<Item> getItems()
    + int getMaxSize()
}
class MapTile extends External.Serializable {
    '+ updateEffectsPlayer()
    '+ updateEffectsEnemy()
    + String imagePath
    + ArrayList<Enemy> enemy
    + ArrayList<EffectCard> effectCards
    + String name
    + MapTile(HashMap<?,?>)
    + MapTile(MapTile)
    + MapTile(String)
    + MapTile(String,String)
    + Image[] getImage()
}
abstract class Item extends External.Serializable{
    - ArrayList<Item> listOfUs
    + String name
    + String description
    + String imagePath
    + ArrayList<Effect> statChanges
    + Image getImage()
    + Item getItem(string)
    + String getName()
    + void load()
    + void reload()
}
abstract class Weapon extends Item, External.Serializable {
    - boolean isOneHanded
    - boolean isTwoHanded
    + Weapon(boolean,boolean)
    + Weapon(HashMap<String,Object>)
    + int getDmg()
    + String getDmgType()
    + boolean getType()
    + boolean isOneHanded()
    + boolean isTwoHanded()
}
class Melee extends Weapon, External.Serializable {
    + int maxDamage
    + int minDamage
    + Melee(HashMap<String,Object>)
    + Melee(String,int,int,boolean,boolean)
    + int getDmg()
    + String getDmgType()
    + boolean getType()
}
class Ranged extends Weapon, External.Serializable {
    - int maxDamage
    - int minDamage
    + Ranged(HashMap<String,Object>)
    + Ranged(String, int,int,boolean,boolean)
    + int getDmg()
    + String getDmgType()
    + boolean getType()
}
abstract class Armour extends Item, External.Serializable {
    + String name
    + String type
    + Armour(HashMap<String,Object>)
    + Armour(String,int)
    + getDef()
}
class Consumable extends Item, External.Serializable {
    - String description
    + String get description()
    + String name
}
class Accessory extends Item, External.Serializable {
}
class Enchantment extends External.Serializable{
    + ArrayList<Effect> stats
    + String prefix
    + String suffix
    + Enchantment(ArrayList<Effect>,String,String)
    + String getPrefix()
    + String getSufix()
}
class Currency{
    + int value
    + String name
    + String description
    + String imagePath
    + Currency(Currency,int)
    + Currency(HashMap<String,Object>)
    + String getDescription
    + Image getImage()
    + String getName()
    + int getValue()
}
class Enemy extends External.Serializable {
    - String name
    - int initiative
    - String description
    - int damage
    - int defence
    - String description
    - int hp
    - String imagePath
    - int initiative
    - ArrayList<Item> loot
    - String name
    + Enemy(HashMap<String, Object>)
    + Enemy(String,String,String,int,int,int,int)
    + int attack()
    + ArrayList<Item> droppedLoot()
    + int getDefence()
    + String getDescription()
    + int getHP()
    + Image getImage()
    + String getImagePath()
    + int getInitiative()
    + String getName()
    + int takeDamage(int)
    + void updateInitiative(int)
}
class CombatScene extends GUI {
    - ArrayList<Enemy> enemies
    - currentPlayer p
    - int maxInitiative
    + void startCombat(player)
    + void endCombat()
}
class EffectCard {
    + ArrayList<Effect> statChanges
    + String name
    + String desc
    + EffectCard(ArrayList<Effect>,String,String)
    + void addBuffs()
    + String getDesc()
    + String getName()
    + ArrayList<Effect> getStatChanges()
}
class Race extends External.Serializable  {
    - String imagePath
    - ArrayList<Race> listOfUs
    + String name
    + Race(HashMap<String,Object>,String)
    + Race(String,String)
    + Race getRace(String)
    + ArrayList<Race> getRaces()
    + void load()
    + void reload()
}
interface External.Serializable
Launcher --> StateSaver
Launcher *-- GameState
Launcher *-- MainMenuGUI
GameState *-- GUI
GUI -> MapTile
StateSaver -> MapTile
StateSaver -> GameState
GameState --> CharacterScene
GameState -* explorerScene
JSONInterpreter --> GameState
Player <- CharacterScene
GameState *-- Player
Commands --* explorerScene
Commands --* CharacterScene
Commands --* CombatScene
Player o-- Allies
Player *-- Inventory
Player *-- Race
GameState "5x5" *-- MapTile
Inventory "0-?" o-- Item
Enchantment -o Item
Effect --* Enchantment
Effect --* Allies
Effect --* EffectCard
Inventory *- Currency
Enemy o-- Currency
Enemy o- Item
MapTile o-- Enemy
MapTile o-- CombatScene
Player -* CombatScene
CombatScene *- Enemy
Player o-- EffectCard
MapTile o-- EffectCard

@enduml